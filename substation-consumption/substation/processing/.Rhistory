source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
cat(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
install.packages(data.table)
install.packages("data")
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
install.packages("data.table")
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
mydat <- fread(UrlLink)
install.packages('curl')
mydat <- fread(UrlLink)
cat(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
mydat <- fread(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
mydat <- fread(UrlLink)
mydat <- getURL(UrlLink)
library(RCurl)
install.packages("RCurl")
mydat <- getURL(UrlLink)
library(RCurl)
mydat <- getURL(UrlLink)
mydat <- getURL(UrlLink,ssl.verifypeer = FALSE)
mydat
mydat <- fread(UrlLink,ssl.verifypeer = FALSE)
mydat
cat(UrlLink)
mydat <- fread(cat(UrlLink),ssl.verifypeer = FALSE)
mydat <- fread(cat(UrlLink))
mydat <- getURL(cat(UrlLink))
install.packages("httpr")
install.packages("httr")
get(UrlLink)
txt = getURL("http://www.omegahat.net/RCurl/")
txt
cat(UrlLink)
get(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
get(UrlLink)
get(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
get(UrlLink)
mydat <- getURL(cat(UrlLink))
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc")
mydat <- fread("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",ssl.verifypeer = FALSE)
mydat <- fread("https://esmartprodcloudservice.cloudapp.net/TsValues.svc")
mydat <- get("https://esmartprodcloudservice.cloudapp.net/TsValues.svc")
mydat <- get('https://esmartprodcloudservice.cloudapp.net/TsValues.svc')
mydat <- fread('https://esmartprodcloudservice.cloudapp.net/TsValues.svc')
?getURL
url <- "http://journal.gucas.ac.cn/CN/article/downloadArticleFile.do?
attachType=PDF&id=11771"
destfile <- "myfile.pdf"
download.file(url, destfile, mode="wb")
getURL("https://sourceforge.net/",
ssl.verifypeer = FALSE)
tem=getURL("https://sourceforge.net/",ssl.verifypeer = FALSE)
tem
tem=getURL("view-source:https://esmartprodcloudservice.cloudapp.net/TsValues.svc",ssl.verifypeer = FALSE)
tem=getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",ssl.verifypeer = FALSE)
tem
mydat <- fread(cat(UrlLink),ssl.verifypeer = FALSE)
mydat <- getURL(UrlLink,ssl.verifypeer = FALSE)
mydat
UrlLink
mydat <- getURL(cat(UrlLink),ssl.verifypeer = FALSE)
mydat <- getURL(https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={"to": "2017-08-22", "from": "2017-08-10", "id": "81861", "tsType": "1"}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=,ssl.verifypeer = FALSE)
mydat <- getURL('https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={"to": "2017-08-22", "from": "2017-08-10", "id": "81861", "tsType": "1"}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=',ssl.verifypeer = FALSE)
myat
mydat
x = getURL("http://www.nytimes.com",
header = TRUE, verbose = TRUE,
cookiefile = "/home/duncan/Rcookies",
netrc = TRUE,
maxredirs = as.integer(20),
netrc.file = "/home2/duncan/.netrc1",
followlocation = TRUE)
x
x = getURL("http://www.nytimes.com",
header = TRUE, verbose = TRUE,
cookiefile = "/home/duncan/Rcookies",
netrc = TRUE,
maxredirs = as.integer(20),
netrc.file = "/home2/duncan/.netrc1",
followlocation = TRUE)
library(httr)
r <- GET("http://httpbin.org/get")
r
status_code(r)
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net")
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net",ssl.verifypeer = FALSE)
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",ssl.verifypeer = FALSE)
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData",ssl.verifypeer = FALSE)
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request",ssl.verifypeer = FALSE)
mydat <- getURLContent(cat(UrlLink),ssl.verifypeer = FALSE)
mydat <- getURLContent(cat(UrlLink))
mydat <- getURLContent(UrlLink)
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net/TsValues.svc")
library(httr)
r <- GET("https://esmartprodcloudservice.cloudapp.net")
library(httr)
r <- URL("https://esmartprodcloudservice.cloudapp.net")
mydat <- getURL(cat(UrlLink),ssl.verifypeer = FALSE)
mydat <- getURL(UrlLink,ssl.verifypeer = FALSE)
mydat
UrlLink
mydat <- getURL(UrlLink,ssl.verifypeer = FALSE)
mydat <- getURL(UrlLink)
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc")
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",ssl.verifypeer=FALSE)
mydat
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "key"2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = 2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
mydat
sample2 <- GET(“http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA“)
sample2 <- GET("http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
sample2
content(sample2)
source('~/.active-rstudio-document', echo=TRUE)
names(raw.result)
mydat <- getURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
mydat <- get("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
mydat <- CURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
mydat <- CURL("https://esmartprodcloudservice.cloudapp.net/TsValues.svc",query = list(to = "2017-8-22",from="2017-8-10", id ="81861",tsType="1"),ssl.verifypeer=FALSE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
url <- "https://api.twitter.com/1.1/statuses/user_timeline.json?count=10&screen_name=Rbloggers"
req <- httr::GET(url, httr::add_headers(Authorization = token))
req
url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=")
read.cvs(url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI="))
read.csv(url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI="))
a=url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=")
a
read.csv(url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI="))
read.csv(url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=",ssl.verifypeer=FALSE))
read.csv(url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI="))
a=url("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=")
a
a.text
a
getURLContent("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=")
getURLContent("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=",ssl.verifypeer=FALSE)
tem=getURLContent("https://esmartprodcloudservice.cloudapp.net/TsValues.svc/GetTsData?request={%22to%22:%20%222017-08-22%22,%20%22from%22:%20%222017-08-10%22,%20%22id%22:%20%2281861%22,%20%22tsType%22:%20%221%22}&token=BwtMhdv2ygILPRNrYwlBLMpLWBSLGnnI0W0CBXf7AsI=",ssl.verifypeer=FALSE)
tem
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem1
tem
print(UrlLink)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem1
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem1
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem_data
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem_data
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem_data
unlist(strsplit("a.b.c", "."))
unlist(strsplit("a.b.c", "[.]"))
strsplit("a.b.c", "[.]")
tem=unlist(strsplit("a.b.c", "[.]"))
tem
tem[1]
tem[2]
tem[3]
tem=unlist(strsplit(tem_data, "[\r\n]"))
tem
tem[1]
tem[2]
tem[3]
tem_data
tem=unlist(strsplit(tem_data, "[\r\n]"))
tem
read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
read.table(UrlLink,ssl.verifypeer=FALSE)
read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
tem1=read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
tem1
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
tem_data
tem1=read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
tem_data
tem_data[length(tem_data)]
tem_data[length(tem_data):length(tem_data)]
tem_data
length(tem_data)
length(tem_data[1])
tem_data[1]
tem_data[2]
tem_data[3]
tem_data[1]
getURLContent(UrlLink)
getURLContent(UrlLink,ssl.verifypeer=FALSE)
read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
tem=read.table(getURLContent(UrlLink,ssl.verifypeer=FALSE))
tem
read.table(tem_data)
tem1=read.table(tem_data),
tem1=read.table(tem_data),
tem1=read.table(tem_data);
tem1
tem1
read.table(tem_data)
tem_data
read.table("81861,2017-08-21T00:00:00Z,0.09\r\n81861,2017-08-21T01:00:00Z,0.06\r\n81861,2017-08-21T02:00:00Z,0.07\r\n81861,2017-08-21T03:00:00Z,0.09\r\n81861,2017-08-21T04:00:00Z,0.08\r\n81861,2017-08-21T05:00:00Z,0.06\r\n81861,2017-08-21T06:00:00Z,0.06\r\n81861,2017-08-21T07:00:00Z,0.07\r\n81861,2017-08-21T08:00:00Z,0.08\r\n81861,2017-08-21T09:00:00Z,0.08\r\n81861,2017-08-21T10:00:00Z,0.07\r\n81861,2017-08-21T11:00:00Z,0.07\r\n81861,2017-08-21T12:00:00Z,0.07\r\n81861,2017-08-21T13:00:00Z,0.08\r\n81861,2017-08-21T14:00:00Z,0.09\r\n81861,2017-08-21T15:00:00Z,0.07\r\n81861,2017-08-21T16:00:00Z,0.06\r\n81861,2017-08-21T17:00:00Z,0.07\r\n81861,2017-08-21T18:00:00Z,0.08\r\n81861,2017-08-21T19:00:00Z,0.09\r\n81861,2017-08-21T20:00:00Z,0.09\r\n81861,2017-08-21T21:00:00Z,0.08\r\n81861,2017-08-21T22:00:00Z,0.293333333333333\r\n81861,2017-08-21T23:00:00Z,0.233333333333333\r\n81861,2017-08-22T00:00:00Z,0")
tem_data
as.data.table(tem_data)
tstrsplit(tem_data)
tstrsplit(tem_data,"\r\n")
tstrsplit(tem_data,",")
dataset = tstrsplit(tem_data,"\r\n")
dataset
dataset[=]
dataset[0]
dataset[1]
dataset[1]
dataset[2]
tstrsplit(dataset[2],",")
tstrsplit(dataset[2],",")[3]
type(dataset)
tstrsplit(dataset[2],",")
typeof(tem_data)
typeof(dataset)
tem_data
gsub("\r","",tem_data)
gsub("\"","",tem_data)
tem_data=gsub("\"","",tem_data)
tem_data
read.table(tem_data,sep=",")
test1 <- c(1:5, "6,7", "8,9,10")
tf <- tempfile()
writeLines(test1, tf)
read.csv(tf, fill = TRUE) # 1 column
ncol <- max(count.fields(tf, sep = ","))
read.csv(tf, fill = TRUE, header = FALSE,
col.names = paste0("V", seq_len(ncol)))
unlink(tf)
getwd
getwd()
tf
read.csv(tem_data)
read.csv(text=tem_data)
dataset = read.csv(text=tem_data)
dataset
dataset[0]
dataset[1]
dataset[,1]
dataset[1,]
dataset = read.csv(text=tem_data,header=FALSE)
dataset
tem_data=getURLContent(UrlLink,ssl.verifypeer=FALSE)
tem_data=gsub("\"","",tem_data)
tem_data=gsub("\"","",tem_data)
dataset = read.csv(text=tem_data,header=FALSE)
dataset
dataset = read.csv(text=tem_data,header=FALSE)[1:end-1,]
data.fame(dataset,)
data.fame(dataset)
?data.frame
data.frame(ID=dataset[,1],Time=dataset[,2],Value=dataset[,3])
tem_data = read.csv(text=tem_data,header=FALSE)
dataset=data.frame(ID=dataset[,1],Time=dataset[,2],Value=dataset[,3])
tem_data = read.csv(text=tem_data,header=FALSE)
tem_data = tem_data[-nrow(tem_data),]
dataset=data.frame(ID=dataset[,1],Time=dataset[,2],Value=dataset[,3])
data.frame(ID=dataset[,1],Time=dataset[,2],Value=dataset[,3])
typeof(tem_data)
tem_data = read.csv(text=tem_data,header=FALSE)
tem_data = tem_data[-length(tem_data)]
dataset=data.frame(ID=dataset[,1],Time=dataset[,2],Value=dataset[,3])
dataset
tem_data
tem_data[-length(tem_data)]
tem_data[-length(tem_data),]
tem_data[-length(tem_data)]
tem_data[,-length(tem_data)]
tem_data[-length(tem_data)]
tem_data[-length(tem_data),]
tem_data[-length(tem_data),1:3]
typeof(tem_data)
tem_data[-length(tem_data),]
tem_data[-length(tem_data),1]
tem_data[-length(tem_data),2]
tem_data[-length(tem_data),3]
tem_data[-length(tem_data),0]
tem_data[-length(tem_data),1]
length(tem_daat)
length(tem_data)
tem_data
tem_data = read.csv(text=tem_data,header=FALSE)
tem_data=getURLContent(UrlLink,ssl.verifypeer=FALSE)
tem_data=gsub("\"","",tem_data)
tem_data=gsub("\"","",tem_data)
tem_data = read.csv(text=tem_data,header=FALSE)
tem_data
tem_data[-length(tem_data),]
tem_data[-length(tem_data)]
tem_data[-length(tem_data),]
tem_data[,-length(tem_data)]
head(tem_data,-1)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
dataset
tem_data
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
dataset
getwd()
meters=table.read_csv('MeterPointsHvaler.csv',encoding='latin-1')
meters=table.read_csv('C:\Users\Hoang Tran\Documents\GitHub\R_Notebooks\MeterPointsHvaler.csv',encoding='latin-1')
meters=table.read_csv('C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\MeterPointsHvaler.csv',encoding='latin-1')
meters=read.table('C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\MeterPointsHvaler.csv',encoding='latin-1')
meters
meters[0,]
meters[1,]
meters.dropna()
meters[complete.cases(meters), ]
meters=read.table('C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\MeterPointsHvaler.csv',encoding='latin-1')
meters = meters[complete.cases(meters), ]
meters[1,]
meters
meters[0,]
dim(meters)
meters
meters=read.table('C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\MeterPointsHvaler.csv',encoding='latin-1')
meters[1,]
meters=read.csv('C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\MeterPointsHvaler.csv',encoding='latin-1')
meters = meters[complete.cases(meters), ]
meters[1,]
path_to_meter_file = 'C:\\Users\\Hoang Tran\\Documents\\GitHub\\R_Notebooks\\'
meters=read.csv(paste(path_to_meter_file,'MeterPointsHvaler.csv',sep=''),encoding='latin-1')
meters = meters[complete.cases(meters), ]
meters
ss = 'H125L'
assets=meters[meters['Substation']==ss,'Id'] # take id of all stations register to ss
assets
?for
dataset
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
str(id)
toString(id)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
df_ss
dataset['Value']
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
df_ss[toString(id)] <- dataset['Value']
df_ss
rm(list=ls()
)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
df_ss
tesdf=data.frame()
testdf
tesdf
tesdf("1")=c(1,2,3)
c(1,2,3)
r(1,2,3)
c(1,2,3)
t(c(1,2,3))
tesdf("1")<-c(1,2,3)
tesdf
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
dataset
dataset[Value]
dataset$Value
dataset['Value']
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
rowSums(df_ss)
data.frame(c(dataset$Time,rowSums(df_ss)))
dataset$Time
c(dataset$Time,rowSums(df_ss))
r(dataset$Time,rowSums(df_ss))
rbind(dataset$Time,rowSums(df_ss))
cbind(dataset$Time,rowSums(df_ss))
dataset$Time
OutputData = data.frame(dataset$Time)
OutputData
OutputData = data.frame(dataset$Time)
colnames(OutputData)<-'Time'
OutputData
OutputData = data.frame(dataset$Time)
colnames(OutputData)<-'Time'
OutputData['Value']<-rowSums(df_ss)
rowSums(df_ss)
OutputData
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURL.R', echo=TRUE)
OutputData
source('~/GitHub/R_Notebooks/DownloadDataFromURLv1.R', echo=TRUE)
source('~/GitHub/R_Notebooks/OriginalDSHW.R', echo=TRUE)
source('~/GitHub/R_Notebooks/DownloadDataFromURLv1.R', echo=TRUE)
tem=DownloadURL()
tem
install.packages('AzureSMR')
install.packages('AzureSMR')
source('~/GitHub/R_Notebooks/UploadModelToBlob.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlob.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlob.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlob.R', echo=TRUE)
install.packages('AzureML')
library(AzureML)
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
ws
source('~/GitHub/R_Notebooks/UploadModelToBlobv1.R', echo=TRUE)
UploadModelToBlob()
2
df=2
UploadModelToBlob(df)
source('~/.active-rstudio-document', echo=TRUE)
df1 = DownloadModelFromBlob()
df1
dj2 <- window(dj, end=250)
autoplot(dj2) + xlab("Day") + ylab("") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)")
library('forecast')
dj2 <- window(dj, end=250)
autoplot(dj2) + xlab("Day") + ylab("") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)")
library(fpp2)
dj2 <- window(dj, end=250)
autoplot(dj2) + xlab("Day") + ylab("") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)")
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
setwd("C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing")
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/prosumer_train.R', echo=TRUE)
Rscript
Rscript --help
install.packages(utils)
install.packages("R.utils")
Rscript
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
Rscriipt
Rscript
source('C:/Users/Hoang Tran/Projects/LoadConsumptionServices/consumption-web-services/prosumer/processing/test.R', echo=TRUE)
